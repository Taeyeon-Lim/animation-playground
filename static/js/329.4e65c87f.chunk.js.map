{"version":3,"file":"static/js/329.4e65c87f.chunk.js","mappings":"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","sources":["components/DefaultButton.tsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://animation-playground/./src/pages/TypoGraphy1/index.module.scss?64e6","pages/TypoGraphy1/TypoGraphyItem.tsx","pages/TypoGraphy1/TypoGraphyList.tsx"],"sourcesContent":["import React from 'react';\r\nimport styles from '../css/components.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nexport type restartBtnSize = 'large' | 'medium' | 'small';\r\nexport type restartBtnColor = 'blue' | 'pink' | 'gray' | 'froly' | 'concrete';\r\n\r\ntype DefaultButtonProps = {\r\n  name: string;\r\n  onClickButton: () => void;\r\n  size: restartBtnSize;\r\n  color: restartBtnColor;\r\n  fullWidth?: boolean;\r\n  outline?: boolean;\r\n};\r\n\r\nfunction DefaultButton({\r\n  name,\r\n  onClickButton,\r\n  size,\r\n  color,\r\n  outline,\r\n  fullWidth,\r\n}: DefaultButtonProps) {\r\n  return (\r\n    <button\r\n      onClick={onClickButton}\r\n      className={cx(size, color, { outline: outline, fullWidth: fullWidth })}\r\n    >\r\n      {name}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default DefaultButton;\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"color-blue\":\"#228be6\",\"color-pink\":\"#f06595\",\"color-gray\":\"#ccc\",\"color-froly\":\"#f26d6d\",\"color-concrete\":\"#f2f2f2\",\"typo_graphy-list\":\"TypoGraphy1_typo_graphy-list__NMrHt\",\"typo_graphy-group\":\"TypoGraphy1_typo_graphy-group__f3bFx\",\"typo_graphy\":\"TypoGraphy1_typo_graphy__vbyVu\",\"draw\":\"TypoGraphy1_draw__eqBj2\",\"typo_button_group\":\"TypoGraphy1_typo_button_group__WtEf4\"};","import React, { useRef } from 'react';\r\nimport classNames from 'classnames/bind';\r\nimport styles from './index.module.scss';\r\nimport DefaultButton from '../../components/DefaultButton';\r\nimport {\r\n  restartBtnColor,\r\n  restartBtnSize,\r\n} from '../../components/DefaultButton';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\ntype TypeGraphyItemProps = {\r\n  title: string;\r\n  fontSize: number;\r\n  stroke: string;\r\n  viewBox: string;\r\n  dy: string;\r\n  restartBtnSize: restartBtnSize;\r\n  restartBtnColor: restartBtnColor;\r\n  // onChangeSetting: (type: 'stroke' | 'size' | 'color', text: string) => void;\r\n  children?: React.ReactNode;\r\n};\r\n\r\nfunction TypoGraphyItem({\r\n  title,\r\n  fontSize,\r\n  stroke,\r\n  viewBox,\r\n  dy,\r\n  restartBtnSize,\r\n  restartBtnColor,\r\n  // onChangeSetting,\r\n  children,\r\n}: TypeGraphyItemProps) {\r\n  const textRef = useRef<SVGTextElement>(null);\r\n\r\n  const reAnimation = () => {\r\n    const element = textRef.current;\r\n    if (element) {\r\n      element.style.display = 'none';\r\n      setTimeout(() => {\r\n        element.style.display = 'block';\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cx('typo_graphy-group')}>\r\n      <svg viewBox={viewBox} className={cx('typo_graphy')}>\r\n        <title>{title}</title>\r\n        <g stroke='none' fill='none' fillRule='evenodd' fillOpacity='0'>\r\n          <text\r\n            id='typoText'\r\n            stroke={stroke}\r\n            fontFamily='PermanentMarker-Regular, Permanent Marker'\r\n            fontWeight='normal'\r\n            fontSize={fontSize}\r\n            textAnchor='middle'\r\n            x='50%'\r\n            y='50%'\r\n            dy={dy}\r\n            ref={textRef}\r\n            className={cx('typo-animation')}\r\n            // transform='translate(50%, 50%)'\r\n            // textDecoration='underline' underline | line-through\r\n          >\r\n            {title.split('').map((char: string, index: number) => (\r\n              <tspan key={title + char + index}>{char}</tspan>\r\n            ))}\r\n          </text>\r\n        </g>\r\n      </svg>\r\n      <div className={cx('typo_button_group')}>\r\n        <DefaultButton\r\n          name={`ReStart`}\r\n          onClickButton={reAnimation}\r\n          size={restartBtnSize}\r\n          color={restartBtnColor}\r\n          outline\r\n        />\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TypoGraphyItem;\r\n","import React, { useState } from 'react';\r\nimport TypoGraphyItem from './TypoGraphyItem';\r\nimport styles from './index.module.scss';\r\nimport classNames from 'classnames/bind';\r\nimport DefaultButton, {\r\n  restartBtnColor,\r\n  restartBtnSize,\r\n} from '../../components/DefaultButton';\r\n\r\nconst cx = classNames.bind(styles);\r\nconst palette = ['blue', 'pink', 'gray', 'froly', 'concrete'];\r\nconst sizeSet = ['large', 'medium', 'small'];\r\n\r\ntype TypoListSettingsType = {\r\n  stroke: string;\r\n  size: restartBtnSize;\r\n  color: restartBtnColor;\r\n};\r\n\r\nfunction TypoGraphyList() {\r\n  const [typoListSettings, setTypoListSettings] =\r\n    useState<TypoListSettingsType>({\r\n      stroke: styles['color-blue'],\r\n      size: 'large',\r\n      color: 'blue',\r\n    });\r\n\r\n  const onChangeSetting = (type: 'stroke' | 'size' | 'color', text: string) =>\r\n    setTypoListSettings(prev => {\r\n      return { ...prev, [type]: text };\r\n    });\r\n\r\n  return (\r\n    <div className={cx('typo_graphy-list')}>\r\n      <TypoGraphyItem\r\n        title={`TypoGraphy@${typoListSettings.color} ì•¼!`}\r\n        fontSize={100}\r\n        stroke={typoListSettings.stroke}\r\n        viewBox={'0 0 1260 150'}\r\n        dy={'5rem'}\r\n        restartBtnSize={typoListSettings.size}\r\n        restartBtnColor={typoListSettings.color}\r\n      >\r\n        {sizeSet.map(size => (\r\n          <DefaultButton\r\n            key={'button' + size}\r\n            name={size}\r\n            onClickButton={() => onChangeSetting('size', size)}\r\n            size={typoListSettings.size}\r\n            color={typoListSettings.color}\r\n          />\r\n        ))}\r\n        {palette.map(color => (\r\n          <DefaultButton\r\n            key={'button' + color}\r\n            name={color}\r\n            onClickButton={() => {\r\n              onChangeSetting('color', color);\r\n              onChangeSetting('stroke', styles[`color-${color}`]);\r\n            }}\r\n            size={typoListSettings.size}\r\n            color={typoListSettings.color}\r\n          />\r\n        ))}\r\n      </TypoGraphyItem>\r\n      <TypoGraphyItem\r\n        title={`TypoGraphy@Froly ì•¼!`}\r\n        fontSize={75}\r\n        stroke={styles['color-froly']}\r\n        viewBox={'0 0 1260 150'}\r\n        dy={'5rem'}\r\n        restartBtnSize={'large'}\r\n        restartBtnColor={'froly'}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TypoGraphyList;\r\n"],"names":["cx","classNames","styles","name","onClickButton","size","color","outline","fullWidth","onClick","className","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","title","fontSize","stroke","viewBox","dy","restartBtnSize","restartBtnColor","children","textRef","useRef","fill","fillRule","fillOpacity","id","fontFamily","fontWeight","textAnchor","x","y","ref","split","map","char","index","DefaultButton","element","current","style","display","setTimeout","palette","sizeSet","useState","typoListSettings","setTypoListSettings","onChangeSetting","type","text","prev"],"sourceRoot":""}